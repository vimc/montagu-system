# Main server configuration. See below for redirects.
server {
    listen       _PORT_ ssl;
    server_name  localhost  montagu.vaccineimpact.org;

    ssl_certificate      /etc/montagu/proxy/certificate.pem;
    ssl_certificate_key  /etc/montagu/proxy/ssl_key.pem;

    # SSL settings as recommended by this blog: https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_dhparam /etc/montagu/proxy/dhparam.pem;

    root /usr/share/nginx/html;

    # Serve up a static page for confirming the server is running
    location / {
        try_files /index.html =404;
        expires -1;
        add_header Cache-Control "public";
    }

    location /new-password {
         try_files /resources/new-password.html =404;
         expires -1;
         add_header Cache-Control "public";
    }

    location /reset-password {
         try_files /resources/reset-password.html =404;
         expires -1;
         add_header Cache-Control "public";
    }

    # Resources for static page
    location /resources/ {
    }

    # Eventually the visualisation app, not authenticated
    location /visualisation {
    }

    # Static resources behind jwt auth
    location /model-documentation/ {
      proxy_pass http://static:80/model-documentation/;
      proxy_redirect default;
    }

    # Static resources behind jwt auth
    location /estimate-comparison/ {
      proxy_pass http://static:80/estimate-comparison/;
      proxy_redirect default;
    }

    # Pass through to different containers based on url prefix.
    location /api/ {
        proxy_pass http://api:8080/;
        proxy_redirect default;

        # proxy_buffering is off, otherwise nginx downloads
        # the full request before passing it on: This is bad for large files.
        proxy_buffering off;
        proxy_request_buffering off;

        proxy_send_timeout 200s;
        proxy_read_timeout 200s;
    }

    location /admin/ {
        proxy_pass http://admin/;
    }
    location /contribution/ {
        proxy_pass http://contrib/;
    }

    # resolving /reports/ dynamically because the orderly web container may not be up when the proxy starts
    # for an explanation of this config see: https://tenzer.dk/nginx-with-dynamic-upstreams/
    set $orderly_web http://orderly_web_web:8888;
    location /reports/ {
        resolver 127.0.0.11 valid=30s;
        rewrite ^/reports/(.*) /$1 break;
        proxy_pass $orderly_web;
        proxy_redirect http://orderly_web_web:8888/ /reports/;

        location "~/reports/(?<name>[^/]+)/(?<version>\d{8}-\d{6}-[0-9a-f]{8})" {
            return 301 /reports/report/$name/$version;
        }
    }

    # Ideally these github bots would be on a separate proxy server
    # see https://mrc-ide.myjetbrains.com/youtrack/issue/mrc-1280
    # Resolving dynamically for the same reason as above
    location /pull-request/ {
        resolver 127.0.0.11 valid=30s;
        set $webhook http://support.montagu.dide.ic.ac.uk:4567/pull-request/;
        proxy_pass $webhook;
    }


    # Resolving dynamically for the same reason as above
    location /naomi-bot/ {
        resolver 127.0.0.11 valid=30s;
        set $webhook http://support.montagu.dide.ic.ac.uk:4568/naomi-bot/;
        proxy_pass $webhook;
    }

}

# Redirect all http requests to the SSL endpoint and the correct domain name
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    location /basic_status {
        stub_status;
        allow 129.31.26.30/32;
        allow 129.31.24.0/23;
        allow 192.168.0.0/16;
        allow 172.16.0.0/12;
        deny all;
    }

    location / {
        return 301 https://_HOST_$request_uri;
    }
}
